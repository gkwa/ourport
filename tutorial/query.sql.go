// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package tutorial

import (
	"context"
	"database/sql"
)

const createLink = `-- name: CreateLink :one
INSERT
or     IGNORE
into   links
       (
              url,
              title
       )
       VALUES
       (
              ?,
              ?
       )
RETURNING id, url, title, created_at
`

type CreateLinkParams struct {
	Url   string
	Title sql.NullString
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.Url, arg.Title)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.CreatedAt,
	)
	return i, err
}

const getImageLinks = `-- name: GetImageLinks :many
SELECT DISTINCT url,
               title,
               MIN(created_at) AS first_seen
FROM   links
WHERE  LOWER(url) NOT LIKE '%thumb%'
 AND   LOWER(url) NOT LIKE '%th-%'
 AND  (
   LOWER(url) LIKE '%.jpg'
   OR LOWER(url) LIKE '%.jpeg'
 )
GROUP  BY url
ORDER  BY first_seen
`

type GetImageLinksRow struct {
	Url       string
	Title     sql.NullString
	FirstSeen interface{}
}

func (q *Queries) GetImageLinks(ctx context.Context) ([]GetImageLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, getImageLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImageLinksRow
	for rows.Next() {
		var i GetImageLinksRow
		if err := rows.Scan(&i.Url, &i.Title, &i.FirstSeen); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinks = `-- name: GetLinks :many
SELECT DISTINCT url,
                title,
                MIN(created_at) AS first_seen
FROM   links
GROUP  BY url
ORDER  BY first_seen
`

type GetLinksRow struct {
	Url       string
	Title     sql.NullString
	FirstSeen interface{}
}

func (q *Queries) GetLinks(ctx context.Context) ([]GetLinksRow, error) {
	rows, err := q.db.QueryContext(ctx, getLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLinksRow
	for rows.Next() {
		var i GetLinksRow
		if err := rows.Scan(&i.Url, &i.Title, &i.FirstSeen); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
